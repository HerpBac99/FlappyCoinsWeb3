/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
 */

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const LOG_STORAGE_KEY = 'flappyCoin_logs'; // –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ –≤ localStorage
const MAX_STORED_LOGS = 1000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö—Ä–∞–Ω–∏–º—ã—Ö –ª–æ–≥–æ–≤

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const LOG_LEVELS = {
    DEBUG: 0,
    INFO: 1,
    WARN: 2,
    ERROR: 3
};

// –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è)
let currentLogLevel = LOG_LEVELS.DEBUG;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (process.env.NODE_ENV === 'production') {
    currentLogLevel = LOG_LEVELS.WARN;
}

/**
 * –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥–∏ –≤ localStorage –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
 */
const Logger = {
    logs: [],
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {Object} –û–±—ä–µ–∫—Ç –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
     */
    init() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–∏ –∏–∑ localStorage, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        try {
            const storedLogs = localStorage.getItem(LOG_STORAGE_KEY);
            if (storedLogs) {
                this.logs = JSON.parse(storedLogs);
                console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.logs.length} —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤ –∏–∑ localStorage:', error);
        }
        
        // –°–æ–∑–¥–∞–µ–º UI –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
        this.createLogUI();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        window.addEventListener('error', (event) => {
            this.log('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ' + event.message, 'error', {
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno,
                stack: event.error ? event.error.stack : null
            });
            this.saveLogs();
        });
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è WebSocket –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        this.interceptSocketEvents();
        
        console.log('–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        return this;
    },
    
    /**
     * –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è WebSocket –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    interceptSocketEvents() {
        if (window.io) {
            const originalIO = window.io;
            window.io = function() {
                const socket = originalIO.apply(this, arguments);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
                const originalOn = socket.on;
                const originalEmit = socket.emit;
                
                // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ on –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
                socket.on = function(event, callback) {
                    return originalOn.call(this, event, function() {
                        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
                        const args = Array.from(arguments);
                        Logger.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ Socket.IO: ${event}`, 'debug', 
                            args.length > 0 ? args[0] : null);
                        
                        // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                        callback.apply(this, arguments);
                    });
                };
                
                // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ emit –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
                socket.emit = function(event) {
                    // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–±—ã—Ç–∏–µ (–∫—Ä–æ–º–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π)
                    if (!event.startsWith('ping') && event !== 'pong') {
                        const args = Array.from(arguments).slice(1);
                        Logger.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ Socket.IO: ${event}`, 'debug', 
                            args.length > 0 ? args[0] : null);
                    }
                    
                    // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                    return originalEmit.apply(this, arguments);
                };
                
                return socket;
            };
        }
    },
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
     */
    createLogUI() {
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
        const viewLogsBtn = document.createElement('button');
        viewLogsBtn.id = 'view-logs-btn';
        viewLogsBtn.textContent = 'üîç –õ–æ–≥–∏';
        viewLogsBtn.style.cssText = `
            position: fixed;
            bottom: 10px;
            right: 10px;
            padding: 8px 12px;
            background-color: rgba(0, 0, 0, 0.6);
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 12px;
            z-index: 9999;
            cursor: pointer;
        `;
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
        const logModal = document.createElement('div');
        logModal.id = 'log-modal';
        logModal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.9);
            z-index: 10000;
            display: none;
            flex-direction: column;
            color: white;
            font-family: monospace;
            padding: 10px;
        `;
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const modalHeader = document.createElement('div');
        modalHeader.style.cssText = `
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        `;
        
        const modalTitle = document.createElement('h3');
        modalTitle.textContent = '–ñ—É—Ä–Ω–∞–ª –ª–æ–≥–æ–≤ FlappyCoin';
        modalTitle.style.margin = '0';
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ª–æ–≥–æ–≤
        const logContent = document.createElement('div');
        logContent.id = 'log-content';
        logContent.style.cssText = `
            flex: 1;
            overflow-y: auto;
            background-color: rgba(0, 0, 0, 0.5);
            padding: 10px;
            border-radius: 4px;
            font-size: 11px;
            white-space: pre-wrap;
        `;
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∞–º–∏
        const logToolbar = document.createElement('div');
        logToolbar.style.cssText = `
            display: flex;
            justify-content: space-between;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 10px;
            width: 100%;
        `;
        
        const copyLogsBtn = document.createElement('button');
        copyLogsBtn.textContent = '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å';
        copyLogsBtn.className = 'log-btn';
        
        const sendLogsBtn = document.createElement('button');
        sendLogsBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
        sendLogsBtn.className = 'log-btn';
        
        const clearLogsBtn = document.createElement('button');
        clearLogsBtn.textContent = '–û—á–∏—Å—Ç–∏—Ç—å';
        clearLogsBtn.className = 'log-btn';
        
        const exitLogsBtn = document.createElement('button');
        exitLogsBtn.textContent = '–í—ã—Ö–æ–¥';
        exitLogsBtn.className = 'log-btn';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫
        const style = document.createElement('style');
        style.textContent = `
            .log-btn {
                background-color: #40a7e3;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                font-size: 12px;
                flex: 1;
                padding: 10px;
                min-width: 70px;
                text-align: center;
                margin-bottom: 30px;
            }
            .log-btn:hover {
                background-color: #2c7db2;
            }
            .log-entry {
                margin-bottom: 4px;
                padding-bottom: 4px;
                border-bottom: 1px solid rgba(255,255,255,0.1);
            }
            .log-info { color: #90caf9; }
            .log-debug { color: #80deea; }
            .log-warn { color: #ffcc80; }
            .log-error { color: #ef9a9a; }
            
            @media (max-width: 480px) {
                .log-btn {
                    padding: 8px 4px;
                    font-size: 11px;
                    min-width: 60px;
                }
                
                .log-toolbar {
                    justify-content: center;
                }
            }
        `;
        
        // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É UI
        modalHeader.appendChild(modalTitle);
        
        logToolbar.appendChild(copyLogsBtn);
        logToolbar.appendChild(sendLogsBtn);
        logToolbar.appendChild(clearLogsBtn);
        logToolbar.appendChild(exitLogsBtn);
        
        logModal.appendChild(modalHeader);
        logModal.appendChild(logContent);
        logModal.appendChild(logToolbar);
        
        document.head.appendChild(style);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ DOM –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => {
                document.body.appendChild(viewLogsBtn);
                document.body.appendChild(logModal);
            });
        } else {
            document.body.appendChild(viewLogsBtn);
            document.body.appendChild(logModal);
        }
        
        // –°–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫
        viewLogsBtn.addEventListener('click', () => {
            this.updateLogDisplay();
            logModal.style.display = 'flex';
        });
        
        copyLogsBtn.addEventListener('click', () => {
            this.copyLogs();
        });
        
        sendLogsBtn.addEventListener('click', () => {
            this.sendLogsToServer();
        });
        
        clearLogsBtn.addEventListener('click', () => {
            if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏?')) {
                this.clearLogs();
                this.updateLogDisplay();
            }
        });
        
        exitLogsBtn.addEventListener('click', () => {
            logModal.style.display = 'none';
        });
    },
    
    /**
     * –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     */
    updateLogDisplay() {
        const logContent = document.getElementById('log-content');
        if (!logContent) return;
        
        logContent.innerHTML = '';
        
        if (this.logs.length === 0) {
            logContent.innerHTML = '<em>–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –∂—É—Ä–Ω–∞–ª–µ</em>';
            return;
        }
        
        const logsToShow = this.logs.slice(-500); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 500 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        logsToShow.forEach(log => {
            const logEntry = document.createElement('div');
            logEntry.className = `log-entry log-${log.level}`;
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–æ–≥
            logEntry.innerHTML = `
                <strong>[${log.timestamp}]</strong> 
                <span class="log-level">[${log.level.toUpperCase()}]</span> 
                <span class="log-message">${log.message}</span>
                <br><small class="log-caller">${log.caller}</small>
                ${log.data ? `<br><small class="log-data">${JSON.stringify(log.data)}</small>` : ''}
            `;
            
            logContent.appendChild(logEntry);
        });
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ª–æ–≥—É
        logContent.scrollTop = logContent.scrollHeight;
    },
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
     * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –ª–æ–≥–∞–º–∏
     */
    formatLogsForExport() {
        return this.logs.map(log => {
            return `[${log.timestamp}] [${log.level.toUpperCase()}] ${log.message} (${log.caller})${log.data ? '\n  –î–∞–Ω–Ω—ã–µ: ' + JSON.stringify(log.data) : ''}`;
        }).join('\n');
    },
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ localStorage
     */
    saveLogs() {
        try {
            // –û–±—Ä–µ–∑–∞–µ–º –ª–æ–≥–∏, –µ—Å–ª–∏ –∏—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
            if (this.logs.length > MAX_STORED_LOGS) {
                this.logs = this.logs.slice(-MAX_STORED_LOGS);
            }
            
            localStorage.setItem(LOG_STORAGE_KEY, JSON.stringify(this.logs));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ –≤ localStorage:', error);
        }
    },
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
     */
    clearLogs() {
        this.logs = [];
        this.saveLogs();
    },
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
     * @returns {string} –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
     */
    getCallerInfo() {
        try {
            const stackTrace = new Error().stack;
            const lines = stackTrace.split('\n');
            
            // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - —ç—Ç–æ —Å–∞–º Error()
            // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - —ç—Ç–æ –≤—ã–∑–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ (log)
            // –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ - —ç—Ç–æ –≤—ã–∑–æ–≤ Logger.log –∏–ª–∏ appLogger
            // –ß–µ—Ç–≤–µ—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - —ç—Ç–æ —Ç–æ, —á—Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ - –≤—ã–∑—ã–≤–∞—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è
            if (lines.length >= 4) {
                const callerLine = lines[3].trim();
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
                const functionMatch = callerLine.match(/at\s+([^\s]+)\s+\((.+):(\d+):(\d+)\)/);
                if (functionMatch) {
                    const [_, functionName, file, line, col] = functionMatch;
                    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ –ø—É—Ç–∏
                    const fileName = file.split('/').pop();
                    return `${functionName} –≤ ${fileName}:${line}`;
                }
                
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–æ –ø–µ—Ä–≤–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω
                const anonymousMatch = callerLine.match(/at\s+(.+):(\d+):(\d+)/);
                if (anonymousMatch) {
                    const [_, file, line, col] = anonymousMatch;
                    const fileName = file.split('/').pop();
                    return `${fileName}:${line}`;
                }
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
                return callerLine.replace(/^\s*at\s+/, '');
            }
            
            return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        } catch (e) {
            return '–æ—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è';
        }
    },
    
    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {string} level - –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (info, debug, warn, error)
     * @param {Object} data - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {string} caller - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ (–µ—Å–ª–∏ null, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
     * @returns {Object} –û–±—ä–µ–∫—Ç –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞
     */
    log(message, level = 'info', data = null, caller = null) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
        const callerInfo = caller || this.getCallerInfo();
        
        // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏
        const timestamp = new Date().toISOString();
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ª–æ–≥–∞
        const logEntry = {
            timestamp,
            level,
            message,
            caller: callerInfo,
            data: data
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –ª–æ–≥–æ–≤
        this.logs.push(logEntry);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞
        const consoleMsg = `[${timestamp}] [${level.toUpperCase()}] ${message} (${callerInfo})`;
        switch (level) {
            case 'error':
                console.error(consoleMsg, data || '');
                break;
            case 'warn':
                console.warn(consoleMsg, data || '');
                break;
            case 'debug':
                console.debug(consoleMsg, data || '');
                break;
            default:
                console.log(consoleMsg, data || '');
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏ –≤ localStorage
        this.saveLogs();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ª–æ–≥–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        if (level === 'error' || level === 'warn') {
            this._sendLogToServer(logEntry);
        }
        
        return logEntry;
    },
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
     */
    sendLogsToServer() {
        const logContent = document.getElementById('log-content');
        if (!logContent) return;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
        const previousContent = logContent.innerHTML;
        logContent.innerHTML = '<div style="text-align: center; padding: 20px;">–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...</div>';
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        let userData = null;
        if (window.app && window.app.getState) {
            userData = window.app.getState().userData;
        }
        
        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const logsData = {
            logs: this.logs,
            userAgent: navigator.userAgent,
            appVersion: '1.0.0', // –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            timestamp: new Date().toISOString(),
            userData: userData || {}
        };
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä', {
            logsCount: this.logs.length,
            timestamp: logsData.timestamp,
            userData: userData ? userData.username : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        fetch(`/api/log`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(logsData)
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP –æ—à–∏–±–∫–∞: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                logContent.innerHTML = '<div style="text-align: center; padding: 20px; color: #81c784;">–õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä!</div>';
                setTimeout(() => {
                    logContent.innerHTML = previousContent;
                }, 2000);
            } else {
                throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            }
        })
        .catch(error => {
            logContent.innerHTML = `<div style="text-align: center; padding: 20px; color: #e57373;">–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤: ${error.message}</div>`;
            setTimeout(() => {
                logContent.innerHTML = previousContent;
            }, 3000);
        });
    },
    
    /**
     * –ö–æ–ø–∏—Ä—É–µ—Ç –ª–æ–≥–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
     */
    copyLogs() {
        try {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ª–æ–≥–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            const logsText = this.formatLogsForCopy();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Ñ–æ–∫—É—Å–µ –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
            if (!document.hasFocus()) {
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏: –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –≤ —Ñ–æ–∫—É—Å–µ');
                alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏: –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –≤ —Ñ–æ–∫—É—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                return false;
            }
            
            // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π API –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
            if (navigator.clipboard && navigator.clipboard.writeText) {
                navigator.clipboard.writeText(logsText)
                    .then(() => {
                        console.log('–õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
                        alert('–õ–æ–≥–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
                    })
                    .catch(err => {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ–≥–æ–≤:', err);
                        this.fallbackCopyToClipboard(logsText);
                    });
                return true;
            } else {
                // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
                return this.fallbackCopyToClipboard(logsText);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ–≥–æ–≤:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏: ' + error.message);
            return false;
        }
    },

    /**
     * –ó–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {boolean} - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    fallbackCopyToClipboard(text) {
        try {
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π textarea —ç–ª–µ–º–µ–Ω—Ç
            const textarea = document.createElement('textarea');
            textarea.value = text;
            
            // –°–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –≤ DOM
            textarea.style.position = 'fixed';
            textarea.style.opacity = '0';
            textarea.style.pointerEvents = 'none';
            
            document.body.appendChild(textarea);
            textarea.focus();
            textarea.select();
            
            // –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
            const successful = document.execCommand('copy');
            document.body.removeChild(textarea);
            
            if (successful) {
                console.log('–õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã (–∑–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥)');
                alert('–õ–æ–≥–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
                return true;
            } else {
                console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏ (–∑–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥)');
                alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –≤—Ä—É—á–Ω—É—é.');
                return false;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∞—Å–Ω–æ–º –º–µ—Ç–æ–¥–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏: ' + error.message);
            return false;
        }
    },

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
     * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞
     */
    formatLogsForCopy() {
        try {
            let logsText = '–õ–û–ì–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø\n';
            logsText += `–í—Ä–µ–º—è —ç–∫—Å–ø–æ—Ä—Ç–∞: ${new Date().toISOString()}\n`;
            logsText += `–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${window.appVersion || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
            logsText += `User Agent: ${navigator.userAgent}\n`;
            logsText += '----------------------------------------------------\n\n';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ª–æ–≥
            this.logs.forEach(log => {
                logsText += `[${log.timestamp}] [${log.level.toUpperCase()}] ${log.message}\n`;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ
                if (log.caller) {
                    logsText += `–í—ã–∑–æ–≤ –∏–∑: ${log.caller}\n`;
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if (log.data) {
                    try {
                        const dataStr = typeof log.data === 'object' 
                            ? JSON.stringify(log.data, null, 2) 
                            : log.data.toString();
                        logsText += `–î–∞–Ω–Ω—ã–µ: ${dataStr}\n`;
                    } catch (e) {
                        logsText += `–î–∞–Ω–Ω—ã–µ: [–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É: ${e.message}]\n`;
                    }
                }
                
                logsText += '\n';
            });
            
            return logsText;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ–≥–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            return `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ–≥–æ–≤: ${error.message}`;
        }
    },
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
     * @private
     * @param {Object} logEntry - –ó–∞–ø–∏—Å—å –ª–æ–≥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    _sendLogToServer(logEntry) {
        try {
            // –ï—Å–ª–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –µ—Å—Ç—å URL –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—É–¥–∞
            const logServerUrl = localStorage.getItem('logServerUrl');
            
            if (logServerUrl) {
                fetch(logServerUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(logEntry),
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º keepalive, —á—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å –º–æ–≥ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –¥–∞–∂–µ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è
                    keepalive: true
                }).catch(e => {
                    // –û—à–∏–±–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
                    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', e);
                });
            }
        } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤
        }
    }
};

// –°–æ–∑–¥–∞–µ–º —É–¥–æ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
const appLogger = {
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {number} level - –£—Ä–æ–≤–µ–Ω—å –∏–∑ LOG_LEVELS
     */
    setLevel(level) {
        if (Object.values(LOG_LEVELS).includes(level)) {
            currentLogLevel = level;
            this.info(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: ${
                Object.keys(LOG_LEVELS).find(key => LOG_LEVELS[key] === level)
            }`);
        } else {
            this.warn(`–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: ${level}`);
        }
    },
    
    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å)
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∞
     * @param {Object} [data] - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∞
     */
    debug(message, data = null) {
        if (currentLogLevel <= LOG_LEVELS.DEBUG) {
            Logger.log(message, 'debug', data);
        }
    },
    
    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∞
     * @param {Object} [data] - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∞
     */
    info(message, data = null) {
        if (currentLogLevel <= LOG_LEVELS.INFO) {
            Logger.log(message, 'info', data);
        }
    },
    
    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∞
     * @param {Object} [data] - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∞
     */
    warn(message, data = null) {
        if (currentLogLevel <= LOG_LEVELS.WARN) {
            Logger.log(message, 'warn', data);
        }
    },
    
    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∞
     * @param {Object|Error} [data] - –û—à–∏–±–∫–∞ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∞
     */
    error(message, data = null) {
        if (currentLogLevel <= LOG_LEVELS.ERROR) {
            Logger.log(message, 'error', data);
        }
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫—Ä–∏–ø—Ç–∞
Logger.init();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.appLogger = appLogger;

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ Telegram WebApp API —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
 * @param {Object} tgApp - –û–±—ä–µ–∫—Ç Telegram WebApp
 * @param {string} methodName - –ò–º—è –º–µ—Ç–æ–¥–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞
 * @param {Array} args - –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –º–µ—Ç–æ–¥–∞
 * @returns {*} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–∞ –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
function safeCallTgMethod(tgApp, methodName, args = []) {
    try {
        if (!tgApp) {
            appLogger.warn(`Telegram WebApp API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω`);
            return null;
        }
        
        if (typeof tgApp[methodName] !== 'function') {
            appLogger.warn(`–ú–µ—Ç–æ–¥ ${methodName} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Telegram WebApp API`);
            return null;
        }
        
        return tgApp[methodName](...args);
    } catch (error) {
        appLogger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–µ—Ç–æ–¥–∞ ${methodName}`, { error: error.message });
        return null;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.safeCallTgMethod = safeCallTgMethod;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export const logger = appLogger; 